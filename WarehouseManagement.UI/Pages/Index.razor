@page "/"
@using MyNamespace;
@using WarehouseManagement.Services.Contracts.Models;
@inject IHttpClientFactory clientFactory;


<h1>Тест</h1>
@if (warehouses.Count != 0)
{
    <p>
        Склады:<br />
        <select @oninput="OnChangeWarehouseId">
            @foreach (var warehous in warehouses)
            {
                <option value="@warehous.Id">@warehous.Title</option>
            }
        </select>   
    </p>
}
else
{
    <p style="color:black;"><em>@messageWarehouse</em></p>
}

@if (warehouseUnitResponses.Count != 0)
{
    <table>
        <thead><tr><th>Название продукта</th><th>Ед. измерения</th><th>Кол-во</th><th>Цена(руб.)</th></tr></thead>
        <tbody>
            @foreach (var warehouseUnit in warehouseUnitResponses)
            {
                <tr>
                    <td>@warehouseUnit.Product.Title</td>
                    <td>@warehouseUnit.Unit</td>
                    <td>
                        <button @onclick="() => CountRemove(warehouseUnit)">-</button>                    
                        @warehouseUnit.Count
                        <button @onclick="() => CountAdd(warehouseUnit)">+</button>
                    </td>
                    <td>@warehouseUnit.Price</td>
                </tr>
            }       
        </tbody>
    </table>
}
else
{
    <p style="color:black;"><em>@messageWarehouseUnit</em></p>
}

    @code 
{
    private CancellationTokenSource cts = new();
    private object _locker = new();
    HttpClient httpClient = null!;
    private ProductClient productClient { get; set; }
    private WarehouseClient warehouseClient { get; set; }
    private WarehouseUnitClient warehouseUnitClient { get; set; }

    private List<WarehouseUnitResponse> warehouseUnitResponses = new List<WarehouseUnitResponse>();
    private List<WarehouseResponse> warehouses = new List<WarehouseResponse>();
    private string messageWarehouse = "Загрузка . . .";
    private string messageWarehouseUnit = "Товаров не найдено!";

    protected override async Task OnInitializedAsync()
    {
        httpClient = clientFactory.CreateClient();
        productClient = new ProductClient(httpClient);
        warehouseClient = new WarehouseClient(httpClient);
        warehouseUnitClient = new WarehouseUnitClient(httpClient);
        await LoadData();
    }

    async Task LoadData()
    {      
        warehouses = (await warehouseClient.GetAllAsync(cts.Token)).ToList();

        if (warehouses.Count == 0)
        {
            messageWarehouse = "Складов не найдено!";
        }
        else
        {
            warehouseUnitResponses = warehouses[0].WarehouseUnitModels.ToList();
        }
    }    

    void CountRemove(WarehouseUnitResponse warehouseUnitResponse)
    {
        warehouseUnitResponse.Count = EditModel(warehouseUnitResponse.Id, warehouseUnitResponse.Count, -1);
    }

    void CountAdd(WarehouseUnitResponse warehouseUnitResponse)
    {
        warehouseUnitResponse.Count = EditModel(warehouseUnitResponse.Id, warehouseUnitResponse.Count, 1);
    }

    int EditModel(Guid id, int count, int quantity)
    {
        int newCount = count;

        lock (_locker)
        {
            var warehouseUnit = warehouseUnitClient.GetByIdAsync(id, cts.Token).Result;

            if (warehouseUnit != null)
            {
                var warehouseUnitRequest = new WarehouseUnitRequest
                    {
                        Id = warehouseUnit.Id,
                        Count = (warehouseUnit.Count + quantity),
                        Price = warehouseUnit.Price,
                        ProductId = warehouseUnit.Product.Id,
                        Unit = warehouseUnit.Unit
                    };

                newCount = warehouseUnitClient.EditAsync(warehouseUnitRequest, cts.Token).Result.Count;
                return newCount;
            }
        }

        return newCount;
    }

    private async Task OnChangeWarehouseId(ChangeEventArgs e)
    {
        if (e.Value != null)
        {
            var id = Guid.Parse(e.Value.ToString());
            var warehouse = await warehouseClient.GetByIdAsync(id, cts.Token);

            if (warehouse != null)
            {
                warehouseUnitResponses = new List<WarehouseUnitResponse>(warehouse.WarehouseUnitModels);
                StateHasChanged();
            }
        }
    }  
    }
